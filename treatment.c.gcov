        -:    0:Source:src/treatment.c
        -:    0:Graph:treatment.gcno
        -:    0:Data:treatment.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://---------------------------------------------------------
        -:    2:// ##
        -:    3:// ## @Author: Med
        -:    4:// ## @Editor: Emacs - ggtags
        -:    5:// ## @TAGS:   Global
        -:    6:// ## @CPU:    STM32F103
        -:    7:// ##
        -:    8:// #### TREATMENT.C ###############################
        -:    9://---------------------------------------------------------
        -:   10:
        -:   11:// Includes --------------------------------------------------------------------
        -:   12:#include "treatment.h"
        -:   13:#include "comms.h"
        -:   14:
        -:   15:#include <string.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <stdio.h>
        -:   18:
        -:   19:
        -:   20:// Private Types Constants and Macros ------------------------------------------
        -:   21:typedef enum {
        -:   22:    TREATMENT_STANDBY = 0,
        -:   23:    TREATMENT_STARTING,
        -:   24:    TREATMENT_RUNNING,
        -:   25:    TREATMENT_PAUSED,
        -:   26:    TREATMENT_WITH_ERRORS,
        -:   27:    TREATMENT_STOPPING
        -:   28:
        -:   29:} treatment_t;
        -:   30:
        -:   31:#define ENABLE_CHX_MASK    0x40
        -:   32:#define DISABLE_CHX_MASK    0x80
        -:   33:#define CHX_MASK        0x0F
        -:   34:
        -:   35:
        -:   36:// Externals -------------------------------------------------------------------
        -:   37:extern unsigned short comms_messages_rpi;
        -:   38:extern volatile unsigned short secs_in_treatment;
        -:   39:extern unsigned short secs_end_treatment;
        -:   40:extern unsigned short secs_elapsed_up_to_now;
        -:   41:
        -:   42:
        -:   43:// Globals ---------------------------------------------------------------------
        -:   44:treatment_conf_t treatment_conf;
        -:   45:unsigned char global_error = 0;
        -:   46:treatment_t treat_state = 0;
        -:   47:
        -:   48:
        -:   49:#define RPI_Flush_Comms (comms_messages_rpi &= ~COMM_RPI_ALL_MSG_MASK)
        -:   50:
        -:   51:// Module Functions ------------------------------------------------------------
      100:   52:void TreatmentManager (void)
        -:   53:{
      100:   54:    char buff [100] = { 0 };
        -:   55:    
      100:   56:    switch (treat_state)
        -:   57:    {
        -:   58:    case TREATMENT_STANDBY:
       39:   59:        if (comms_messages_rpi & COMM_START_TREAT)
        -:   60:        {
        -:   61:            //me piden por el puerto que arranque el tratamiento
        1:   62:            comms_messages_rpi &= ~COMM_START_TREAT;
        1:   63:            if (TreatmentAssertParams() == resp_error)
        -:   64:            {
    #####:   65:                RPI_Send("ERROR on params\r\n");
        -:   66:            }
        -:   67:            // else if (check_other_antenna_conns)
        -:   68:            // {
        -:   69:            //     RPI_Send("ERROR no antenna\r\n");                
        -:   70:            // }
        -:   71:            else
        -:   72:            {
        1:   73:                RPI_Send("OK\r\n");
        -:   74:                // PowerSendConf();
        1:   75:                treat_state = TREATMENT_STARTING;
        -:   76:            }
        -:   77:        }
       39:   78:        RPI_Flush_Comms;
       39:   79:        break;
        -:   80:
        -:   81:    case TREATMENT_STARTING:
        1:   82:        secs_end_treatment = TreatmentGetTime();
        1:   83:        secs_in_treatment = 1;    //con 1 arranca el timer
        1:   84:        secs_elapsed_up_to_now = 0;
        -:   85:        // PowerCommunicationStackReset();
        -:   86:
        -:   87:        // sprintf (buff, "treat start, ch1: 0x%04x, ch2: 0x%04x, ch3: 0x%04x\r\n",
        -:   88:        //          comms_messages_1,
        -:   89:        //          comms_messages_2,
        -:   90:        //          comms_messages_3);
        -:   91:                    
        -:   92:        // RPI_Send(buff);
        -:   93:
        -:   94:        // PowerSendStart();
        1:   95:        treat_state = TREATMENT_RUNNING;
        1:   96:        ChangeLed(LED_TREATMENT_GENERATING);
        -:   97:#ifdef USE_BUZZER_ON_START
        1:   98:        BuzzerCommands(BUZZER_HALF_CMD, 1);
        -:   99:#endif
        1:  100:        break;
        -:  101:
        -:  102:    case TREATMENT_RUNNING:
        -:  103:        // PowerCommunicationStack();    //me comunico con las potencias para conocer el estado
        -:  104:
       39:  105:        if (comms_messages_rpi & COMM_PAUSE_TREAT)
        -:  106:        {
        1:  107:            comms_messages_rpi &= ~COMM_PAUSE_TREAT;
        1:  108:            RPI_Send("OK\r\n");
        -:  109:            // PowerSendStop();
        1:  110:            treat_state = TREATMENT_PAUSED;
        1:  111:            ChangeLed(LED_TREATMENT_PAUSED);
        1:  112:            secs_elapsed_up_to_now = secs_in_treatment;
        -:  113:        }
        -:  114:
       39:  115:        if (comms_messages_rpi & COMM_STOP_TREAT)
        -:  116:        {
        1:  117:            comms_messages_rpi &= ~COMM_STOP_TREAT;
        -:  118:
        -:  119:            //termine el tratamiento por stop, o finish_ok,
        1:  120:            RPI_Send("OK\r\n");
        -:  121:            // PowerSendStop();
        1:  122:            treat_state = TREATMENT_STOPPING;
        -:  123:        }
        -:  124:
        -:  125:        //me mandaron start???
       39:  126:        if (comms_messages_rpi & COMM_START_TREAT)
        -:  127:        {
    #####:  128:            comms_messages_rpi &= ~COMM_START_TREAT;
    #####:  129:            RPI_Send("ERROR\r\n");
        -:  130:        }
        -:  131:
       39:  132:        if (secs_in_treatment >= secs_end_treatment)
        -:  133:        {
        -:  134:            //termine el tratamiento
        -:  135:            // PowerSendStop();
    #####:  136:            RPI_Send("ended ok\r\n");
        -:  137:#ifdef USE_BUZZER_ON_END
        -:  138:            BuzzerCommands(BUZZER_SHORT_CMD, 3);
        -:  139:#endif                
    #####:  140:            treat_state = TREATMENT_STOPPING;
        -:  141:        }
        -:  142:
        -:  143:        //reviso si hay algun canal con error
        -:  144://         if ((comms_messages_1 & COMM_POWER_ERROR_MASK) ||
        -:  145://             (comms_messages_2 & COMM_POWER_ERROR_MASK) ||
        -:  146://             (comms_messages_3 & COMM_POWER_ERROR_MASK))
        -:  147://         {
        -:  148://             PowerSendStop();
        -:  149:
        -:  150://             LED1_ON;
        -:  151://             secs_in_treatment = 0;    //con 0 freno el timer
        -:  152://             sprintf (buff, "treat err, ch1: 0x%04x, ch2: 0x%04x, ch3: 0x%04x\r\n",
        -:  153://                      comms_messages_1,
        -:  154://                      comms_messages_2,
        -:  155://                      comms_messages_3);
        -:  156:                    
        -:  157://             RPI_Send(buff);
        -:  158:
        -:  159://             if (comms_messages_1 & COMM_POWER_ERROR_MASK)
        -:  160://                 Raspberry_Report_Errors(CH1, &comms_messages_1);
        -:  161:
        -:  162://             if (comms_messages_2 & COMM_POWER_ERROR_MASK)
        -:  163://                 Raspberry_Report_Errors(CH2, &comms_messages_2);
        -:  164:
        -:  165://             if (comms_messages_3 & COMM_POWER_ERROR_MASK)
        -:  166://                 Raspberry_Report_Errors(CH3, &comms_messages_3);
        -:  167:
        -:  168:// #ifdef USE_BUZZER_ON_ERROR
        -:  169://             BuzzerCommands(BUZZER_LONG_CMD, 1);
        -:  170:// #endif                                
        -:  171://             LED1_OFF;
        -:  172://             treat_state = TREATMENT_WITH_ERRORS;
        -:  173://         }
       39:  174:        RPI_Flush_Comms;
       39:  175:        break;
        -:  176:
        -:  177:    case TREATMENT_PAUSED:
        -:  178:        // un segundo pause, me hace arrancar nuevamente
       20:  179:        if (comms_messages_rpi & COMM_PAUSE_TREAT)
        -:  180:        {
        1:  181:            comms_messages_rpi &= ~COMM_PAUSE_TREAT;
        1:  182:            secs_in_treatment = secs_elapsed_up_to_now;
        1:  183:            RPI_Send("OK\r\n");
        -:  184:            // PowerSendStart();
        1:  185:            treat_state = TREATMENT_RUNNING;
        1:  186:            ChangeLed(LED_TREATMENT_GENERATING);
        -:  187:        }
        -:  188:
       20:  189:        if (comms_messages_rpi & COMM_STOP_TREAT)
        -:  190:        {
        -:  191:            //estaba en pausa y me mandaron stop
    #####:  192:            comms_messages_rpi &= ~COMM_STOP_TREAT;
    #####:  193:            RPI_Send("OK\r\n");
        -:  194:            // PowerSendStop();
    #####:  195:            treat_state = TREATMENT_STOPPING;
        -:  196:        }
       20:  197:        RPI_Flush_Comms;
       20:  198:        break;
        -:  199:                
        -:  200:    case TREATMENT_STOPPING:
        1:  201:        secs_in_treatment = 0;    //con 0 freno el timer
        -:  202:        // sprintf (buff, "treat end, ch1: 0x%04x, ch2: 0x%04x, ch3: 0x%04x\r\n",
        -:  203:        //          comms_messages_1,
        -:  204:        //          comms_messages_2,
        -:  205:        //          comms_messages_3);
        -:  206:                    
        1:  207:        RPI_Send(buff);
        1:  208:        treat_state = TREATMENT_STANDBY;
        1:  209:        ChangeLed(LED_TREATMENT_STANDBY);
        1:  210:        break;
        -:  211:
        -:  212:    case TREATMENT_WITH_ERRORS:
    #####:  213:        Wait_ms(1000);
        -:  214:        // Power_Send("chf flush errors\n");
    #####:  215:        RPI_Send("STOP\r\n");
    #####:  216:        Wait_ms(1000);
    #####:  217:        RPI_Send("STOP\r\n");
    #####:  218:        Wait_ms(1000);
    #####:  219:        RPI_Send("Flushing errors\r\n");
        -:  220:
        -:  221:        // Power_Send("chf flush errors\n");
        -:  222:        // comms_messages_1 &= ~COMM_POWER_ERROR_MASK;
        -:  223:        // comms_messages_2 &= ~COMM_POWER_ERROR_MASK;
        -:  224:        // comms_messages_3 &= ~COMM_POWER_ERROR_MASK;            
        -:  225:            
    #####:  226:        Wait_ms(1000);
    #####:  227:        treat_state = TREATMENT_STANDBY;
    #####:  228:        ChangeLed(LED_TREATMENT_STANDBY);
    #####:  229:        break;
        -:  230:
        -:  231:    default:
    #####:  232:        treat_state = TREATMENT_STANDBY;
    #####:  233:        break;
        -:  234:    }            
        -:  235:
        -:  236:
        -:  237:    //reviso comunicacion con raspberry
      100:  238:    UpdateRaspberryMessages();
        -:  239:
        -:  240:    //reviso comunicacion con potencias
        -:  241:    // UpdatePowerMessages();
        -:  242:
        -:  243:    // if (sequence_ready)
        -:  244:    //     sequence_ready_reset;
        -:  245:
      100:  246:    UpdateLed();
      100:  247:    UpdateBuzzer();
      100:  248:}
        -:  249:
        -:  250:
        4:  251:resp_t TreatmentSetSignalType (signal_type_t a)
        -:  252:{
        4:  253:    if ((a == SQUARE_SIGNAL) ||
        2:  254:        (a == TRIANGULAR_SIGNAL) ||
        -:  255:        (a == SINUSOIDAL_SIGNAL))
        -:  256:
        3:  257:        treatment_conf.treatment_signal.signal = a;
        -:  258:    else
        1:  259:        return resp_error;
        -:  260:
        3:  261:    return resp_ok;
        -:  262:}
        -:  263:
        3:  264:signal_type_t TreatmentGetSignalType (void)
        -:  265:{
        3:  266:    return treatment_conf.treatment_signal.signal;
        -:  267:}
        -:  268:
        2:  269:resp_t TreatmentSetFrequency (unsigned char freq_int, unsigned char freq_dec)
        -:  270:{
        2:  271:    resp_t resp = resp_error;
        2:  272:    unsigned int calc = 1000000;
        2:  273:    unsigned int freq = 0;
        -:  274:
        -:  275:    //el synchro es un timer con tick cada 100us
        -:  276:    //la cuenta para 2 decimales da 1M/(freq*100)
        2:  277:    freq = freq_int * 100;
        2:  278:    freq += freq_dec;
        2:  279:    freq = freq * K_SYNCHRO_ADJUST;
        2:  280:    freq = freq / 100;
        -:  281:
        2:  282:    calc = calc / freq;
        2:  283:    if ((calc < TIMER_SYNCHRO_MAX) && (calc > TIMER_SYNCHRO_MIN))
        -:  284:    {
        1:  285:        treatment_conf.treatment_signal.freq_int = freq_int;
        1:  286:        treatment_conf.treatment_signal.freq_dec = freq_dec;
        1:  287:        treatment_conf.timer_synchro = (unsigned short) calc;
        1:  288:        resp = resp_ok;
        -:  289:    }
        -:  290:    
        2:  291:    return resp;
        -:  292:}
        -:  293:
    #####:  294:unsigned short TreatmentGetSynchroTimer (void)
        -:  295:{
    #####:  296:    return treatment_conf.timer_synchro;
        -:  297:}
        -:  298:
        2:  299:void TreatmentSetChannelsFlag (unsigned char  a)
        -:  300:{
        2:  301:    if (a & ENABLE_CHX_MASK)
        1:  302:        treatment_conf.channels_in_treatment |= (a & CHX_MASK);
        -:  303:
        2:  304:    if (a & DISABLE_CHX_MASK)
        1:  305:        treatment_conf.channels_in_treatment &= (~(a & CHX_MASK));
        2:  306:}
        -:  307:
        2:  308:unsigned char TreatmentGetChannelsFlag (void)
        -:  309:{
        2:  310:    return (treatment_conf.channels_in_treatment & CHX_MASK);
        -:  311:}
        -:  312:
        -:  313:// resp_t TreatmentChannelFlags (ch_in_treatment_t a)
        -:  314:// {
        -:  315://     if (a == CH1_ENABLE)
        -:  316://         treatment_conf.ch1_enable = 1;
        -:  317:
        -:  318://     if (a == CH2_ENABLE)
        -:  319://         treatment_conf.ch2_enable = 1;
        -:  320:
        -:  321://     if (a == CH3_ENABLE)
        -:  322://         treatment_conf.ch3_enable = 1;
        -:  323:
        -:  324://     if (a == CH1_DISABLE)
        -:  325://         treatment_conf.ch1_enable = 0;
        -:  326:
        -:  327://     if (a == CH2_DISABLE)
        -:  328://         treatment_conf.ch2_enable = 0;
        -:  329:
        -:  330://     if (a == CH3_DISABLE)
        -:  331://         treatment_conf.ch3_enable = 0;
        -:  332:    
        -:  333://     return resp_ok;
        -:  334:// }
        -:  335:
        1:  336:void TreatmentGetFrequency (unsigned char * f_int, unsigned char * f_dec)
        -:  337:{
        1:  338:    *f_int = treatment_conf.treatment_signal.freq_int;
        1:  339:    *f_dec = treatment_conf.treatment_signal.freq_dec;    
        1:  340:}
        -:  341:
        3:  342:resp_t TreatmentSetPower (unsigned char a)
        -:  343:{
        3:  344:    if (a > 100)
        1:  345:        treatment_conf.treatment_signal.power = 100;
        2:  346:    else if (a < 10)
        1:  347:        treatment_conf.treatment_signal.power = 10;
        -:  348:    else
        1:  349:        treatment_conf.treatment_signal.power = a;
        -:  350:
        3:  351:    return resp_ok;
        -:  352:}
        -:  353:
        3:  354:unsigned char TreatmentGetPower (void)
        -:  355:{
        3:  356:    return treatment_conf.treatment_signal.power;
        -:  357:}
        -:  358:
    #####:  359:resp_t TreatmentSetTime (unsigned char h, unsigned char m, unsigned char s)
        -:  360:{
    #####:  361:    if ((h > 1) || (m > 60) || (s > 60))
    #####:  362:        return resp_error;
        -:  363:
    #####:  364:    treatment_conf.treatment_time = h * 3600;
    #####:  365:    treatment_conf.treatment_time += m * 60;
    #####:  366:    treatment_conf.treatment_time += s;
        -:  367:    
    #####:  368:    return resp_ok;
        -:  369:}
        -:  370:
        2:  371:resp_t TreatmentSetTimeinMinutes (unsigned short m)
        -:  372:{
        2:  373:    if (m > 120)
        1:  374:        return resp_error;
        -:  375:
        1:  376:    treatment_conf.treatment_time = m * 60;
        -:  377:    
        1:  378:    return resp_ok;
        -:  379:}
        -:  380:
        2:  381:unsigned short TreatmentGetTime (void)
        -:  382:{
        2:  383:    return treatment_conf.treatment_time;
        -:  384:}
        -:  385:
    #####:  386:void TreatmentGetAllConf (char * tosend)
        -:  387:{
        -:  388:    char buf[30];
        -:  389:
        -:  390:    // Selected signal
    #####:  391:    sprintf(buf, "signal: %d\n", treatment_conf.treatment_signal.signal);
    #####:  392:    strcpy(tosend, buf);
        -:  393:
        -:  394:    // Selected Freq
    #####:  395:    sprintf(buf, "freq: %d.%02dHz\n",
    #####:  396:            treatment_conf.treatment_signal.freq_int,
    #####:  397:            treatment_conf.treatment_signal.freq_dec);
    #####:  398:    strcat(tosend, buf);
        -:  399:
        -:  400:    // Selected power
    #####:  401:    sprintf(buf, "power: %d\n", treatment_conf.treatment_signal.power);
    #####:  402:    strcat(tosend, buf);
        -:  403:
        -:  404:    // Treatment duration
    #####:  405:    sprintf(buf, "time in s: %d\n", treatment_conf.treatment_time);
    #####:  406:    strcat(tosend, buf);
        -:  407:
        -:  408:    // Active channels
    #####:  409:    unsigned char c1 = 0;
    #####:  410:    unsigned char c2 = 0;
    #####:  411:    unsigned char c3 = 0;
        -:  412:
    #####:  413:    if (treatment_conf.channels_in_treatment & ENABLE_CH1_FLAG)
    #####:  414:        c1 = 1;
        -:  415:
    #####:  416:    if (treatment_conf.channels_in_treatment & ENABLE_CH2_FLAG)
    #####:  417:        c2 = 1;
        -:  418:
    #####:  419:    if (treatment_conf.channels_in_treatment & ENABLE_CH3_FLAG)
    #####:  420:        c3 = 1;
        -:  421:    
    #####:  422:    sprintf(buf, "in treat ch1:%d ch2:%d ch3:%d\n", c1, c2, c3);
    #####:  423:    strcat(tosend, buf);
        -:  424:
        -:  425:    //Timer for sync
    #####:  426:    unsigned short tsync = 0;
    #####:  427:    tsync = treatment_conf.timer_synchro / 10;
    #####:  428:    sprintf(buf, "synchro: %dms\n", tsync);
    #####:  429:    strcat(tosend, buf);
    #####:  430:}
        -:  431:
        -:  432://verifica que se cumplan con todos los parametros para poder enviar una senial coherente
        1:  433:resp_t TreatmentAssertParams (void)
        -:  434:{
        1:  435:    resp_t resp = resp_error;
        -:  436:
        1:  437:    if ((treatment_conf.treatment_signal.power > 100) || (treatment_conf.treatment_signal.power < 10))
    #####:  438:        return resp;
        -:  439:
        2:  440:    if ((treatment_conf.treatment_signal.freq_dec > 99) ||
        2:  441:        (treatment_conf.treatment_signal.freq_int < FREQ_MIN_ALLOWED) ||
        1:  442:        (treatment_conf.treatment_signal.freq_int > FREQ_MAX_ALLOWED))
    #####:  443:        return resp;
        -:  444:
        2:  445:    if ((treatment_conf.treatment_signal.signal != SQUARE_SIGNAL) &&
        2:  446:        (treatment_conf.treatment_signal.signal != TRIANGULAR_SIGNAL) &&
        1:  447:        (treatment_conf.treatment_signal.signal != SINUSOIDAL_SIGNAL))
    #####:  448:        return resp;
        -:  449:
        1:  450:    if (!(treatment_conf.channels_in_treatment & CHX_MASK))
    #####:  451:        return resp;
        -:  452:
        1:  453:    return resp_ok;
        -:  454:}
        -:  455:
        -:  456:
    #####:  457:void TreatmentUpdateMainState (treatment_t ms)
        -:  458:{
    #####:  459:    treat_state = ms;
    #####:  460:}
        -:  461:
    #####:  462:treatment_t TreatmentGetMainState (void)
        -:  463:{
    #####:  464:    return treat_state;
        -:  465:}
        -:  466:
        -:  467:
        -:  468:// void TreatmentSetUpDwn (updwn_e up_or_dwn)
        -:  469:// {
        -:  470://     if (up_or_dwn)
        -:  471://         treatment_conf.updwn_conf = UPDWN_MANUAL;
        -:  472://     else
        -:  473://         treatment_conf.updwn_conf = UPDWN_AUTO;
        -:  474:
        -:  475:// }
        -:  476:
        -:  477:// updwn_e TreatmentGetUpDwn (void)
        -:  478:// {
        -:  479://     return treatment_conf.updwn_conf;
        -:  480:// }
        -:  481:
        -:  482:
        -:  483://--- end of file ---//
